import { EngineeringNotation } from "../engineering";
import Decimal from "break_infinity.js";
import { toFixedEngineering } from "../utils";

const UNITS = [
    "", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine",
    "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"
];

const TENS = [
    "", "ten", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"
]

const ABBREVIATIONS = [
    "", "thousand", "million", "billion", "trillion", "quadrillion", "quintillion", "sextillion", "septillion", "octillion", "nonillion", "decillion"
];

const PREFIXES = [
    ["", "un", "duo", "tre", "quattuor", "quin", "se", "septe", "octo", "nove"],
    ["", "deci", "viginti", "triginta", "quadraginta", "quinquaginta", "sexaginta", "septuaginta", "octoginta", "nonaginta"],
    ["", "centi", "ducenti", "trecenti", "quadringenti", "quingenti", "sescenti", "septingenti", "octingenti", "nongenti"]
];

const PREFIXES_2 = [
    "", "milli-", "micri-", "nani-", "pici-", "femti-", "atti-", "zepti-", "yocti-", "xoni-",
    "veci-", "meci-", "dueci-", "treci-", "tetreci-", "penteci-", "hexeci-", "hepteci-", "octeci-", "enneci-",
    "icosi-", "mecosi-", "duecosi-", "trecosi-", "tetrecosi-", "pentecosi-", "hexecosi-", "heptecosi-", "octecosi-", "ennecosi-",
    "triaconti-", "metriaconti-", "duetriaconti-", "tretriaconti-", "tetretriaconti-", "pentetriaconti-", "hexetriaconti-", "heptetriaconti-", "octtriaconti-", "ennetriaconti-",
    "tetraconti-", "metetraconti-", "duetetraconti-", "tretetraconti-", "tetretetraconti-", "pentetetraconti-", "hexetetraconti-", "heptetetraconti-", "octetetraconti-", "ennetetraconti-",
    "pentaconti-", "mepentaconti-", "duepentaconti-", "trepentaconti-", "tetrepentaconti-", "pentepentaconti-", "hexepentaconti-", "heptepentaconti-", "octepentaconti-", "ennepentaconti-",
    "hexaconti-", "mehexaconti-", "duehexaconti-", "trehexaconti-", "tetrehexaconti-", "pentehexaconti-", "hexehexaconti-", "heptehexaconti-", "octehexaconti-", "ennehexaconti-",
    "heptaconti-", "meheptaconti-", "dueheptaconti-", "treheptaconti-", "tetreheptaconti-", "penteheptaconti-", "hexeheptaconti-", "hepteheptaconti-", "octeheptaconti-", "enneheptaconti-",
    "octaconti-", "meoctaconti-", "dueoctaconti-", "treoctaconti-", "tetreoctaconti-", "penteoctaconti-", "hexeoctaconti-", "hepteoctaconti-", "octeoctaconti-", "enneoctaconti-",
    "ennaconti-", "mecennaconti-", "duecennaconti-", "trecennaconti-", "tetrecennaconti-", "pentecennaconti-", "hexecennaconti-", "heptecennaconti-", "octecennaconti-", "ennecennaconti-",
    "hecti-", "mehecti-", "duhecti-",
];

export class EnglishNotation extends EngineeringNotation {
    public get name(): string {
        return "English";
    }

    public get negativeInfinite(): string {
        return "negative infinity";
    }

    public get infinite(): string {
        return "positive infinity";
    }

    public formatNegativeVerySmallDecimal(value: Decimal, places: number): string {
        return `negative one ${this.formatDecimal(value.reciprocal(), places)}th`;
    }

    public formatVerySmallDecimal(value: Decimal, places: number): string {
        return `one ${this.formatDecimal(value.reciprocal(), places)}th`;
    }

    public formatNegativeUnder1000(value: number, places: number): string {
        return `negative ${this.formatUnits(value, places)}`;
    }

    public formatUnder1000(value: number, places: number): string {
        return this.formatUnits(value, places);
    }

    public formatNegativeDecimal(value: Decimal, places: number): string {
        return `negative ${this.formatDecimal(value, places)}`;
    }

    public formatDecimal(value: Decimal, places: number): string {
        const engineering = toFixedEngineering(value, places);
        const mantissa = this.formatUnits(engineering.mantissa, places);
        const abbreviation = engineering.exponent <= 33
            ? ABBREVIATIONS[engineering.exponent / 3]
            : this.formatPrefixes(engineering.exponent);
        return `${mantissa} ${abbreviation}`;
    }

    private formatUnits(e: number, p: number): string {
        let ans = [];
        if (e < Math.pow(10, -p))
            ans.push("zero");
        if (e >= 100) {
            const a = Math.floor(e / 100);
            ans.push(UNITS[a] + " hundred");
            e -= a * 100;
        }
        if (e < 20) {
            if (e >= 1 && ans.length > 0) ans.push("and");
            const a = Math.floor(e);
            ans.push(UNITS[a]);
            e -= a;
        } else {
            if (ans.length > 0) ans.push("and");
            const a = Math.floor(e / 10);
            ans.push(TENS[a]);
            e -= a * 10;
            if (e % 10 != 0) {
                const a = Math.floor(e);
                ans.push(UNITS[a]);
                e -= a;
            }
        }
        if (p > 0) {
            ans.push("point");
            let a = 0;
            while (a < p) {
                ans.push(Math.floor(e * 10) == 0 ? "oh" : UNITS[Math.floor(e * 10)]);
                e = e * 10 - Math.floor(e * 10);
                a++;
            }
        }
        return ans.join(" ");
    }

    private formatPrefixes(e: number): string {
        // I don't know how to clean this please send help
        e = Math.floor(e / 3) - 1;
        let index2 = 0;
        const prefix = [PREFIXES[0][e % 10]];
        while (e >= 10) {
            e = Math.floor(e / 10);
            prefix.push(PREFIXES[++index2 % 3][e % 10]);
        }
        index2 = Math.floor(index2 / 3);
        while (prefix.length % 3 !== 0) {
            prefix.push("");
        }
        let abbreviation = "";
        while (index2 >= 0) {
            if (prefix[index2 * 3] != "un" || prefix[index2 * 3 + 1] != "" || prefix[index2 * 3 + 2] != "") {
                let abb2 = prefix[index2 * 3 + 1] + prefix[index2 * 3 + 2];
                if (["tre", "se"].includes(prefix[index2 * 3]) && ["v", "t", "q"].includes(abb2.substr(0, 1)))
                    abb2 = "s" + abb2;
                if (prefix[index2 * 3] == "se" && ["c", "o"].includes(abb2.substr(0, 1)))
                    abb2 = "x" + abb2;
                if (["septe", "nove"].includes(prefix[index2 * 3]) && ["v", "o"].includes(abb2.substr(0, 1)))
                    abb2 = "m" + abb2;
                if (["septe", "nove"].includes(prefix[index2 * 3]) && ["d", "c", "t", "q", "s"].includes(abb2.substr(0, 1)))
                    abb2 = "n" + abb2;
                abbreviation += prefix[index2 * 3] + abb2;
            }
            if (prefix[index2 * 3] != "" || prefix[index2 * 3 + 1] != "" || prefix[index2 * 3 + 2] != "")
                abbreviation += PREFIXES_2[index2];
            index2--;
        }
        abbreviation = abbreviation.replace(/-$/, "");
        return (abbreviation + "illion")
            .replace("i-illion", "illion")
            .replace("iillion", "illion")
            .replace("aillion", "illion")
            .replace("oillion", "illion");
    }
}
